[{"name": "app.py", "content": "from shiny import App, ui, render, reactive\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom palmerpenguins import load_penguins\nimport plotly.express as px\nfrom shinywidgets import output_widget, render_widget, render_plotly\n\n# Load and clean data\npenguins_df = load_penguins().dropna()\n\n# Define UI\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.h2(\"Sidebar\"),\n        ui.input_selectize(\n            \"selected_attribute\",\n            \"Choose attribute\",\n            [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\n        ),\n        ui.input_slider(\n            \"seaborn_bin_count\",\n            \"Number of Seaborn bins\",\n            5, 100, 20\n        ),\n        ui.input_select(\n        \"selected_island\",\n        \"Choose island\",\n        choices=penguins_df[\"island\"].unique().tolist(),\n        selected=penguins_df[\"island\"].unique()[0]\n        ),\n        ui.input_checkbox_group(\n            \"selected_species_list\",\n            \"Filter species\",\n            [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n            selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n            inline=True\n        ),\n        ui.hr(),\n        ui.a(\"GitHub: dfintel25\", href=\"https://github.com/dfinte25/cintel-02-repo\", target=\"_blank\"),\n        open=\"open\"\n    ),\n\n    ui.h2(\"Palmer Penguin Analysis\"),\n\n    ui.layout_columns(\n        ui.output_data_frame(\"data_table\"),\n        ui.output_data_frame(\"penguins_grid\")\n    ),\n\n    ui.layout_columns(\n        ui.card(\n            ui.card_header(\"Plotly Histogram\"),\n            output_widget(\"plotly_histogram\")\n        ),\n        ui.card(\n            ui.card_header(\"Seaborn Histogram\"),\n            ui.output_plot(\"seaborn_histogram\")\n        )\n    ),\n    ui.card(\n        ui.card_header(\"Plotly Scatterplot\"),\n        output_widget(\"plotly_scatterplot\"),\n        full_screen=True\n    )\n)\n\n# --------------------------------------------------------\n# Server logic\n# --------------------------------------------------------\ndef server(input, output, session):\n    \n    # Reactive filter\n    @reactive.calc\n    def filtered_data():\n        return penguins_df[\n        (penguins_df[\"species\"].isin(input.selected_species_list())) &\n        (penguins_df[\"island\"] == input.selected_island())\n    ]\n        \n    @output\n    @render.data_frame\n    def data_table():\n        return filtered_data()\n\n    @output\n    @render.data_frame\n    def penguins_grid():\n        return filtered_data()  # Static unfiltered grid\n\n    @output\n    @render_widget\n    def plotly_histogram():\n        df = filtered_data()\n        selected_attr = input.selected_attribute()\n        fig = px.histogram(\n        df,\n        x=selected_attr,\n        nbins=30,\n        color=\"species\",\n        title=f\"{selected_attr} Histogram by Species\"\n    )\n        fig.update_layout(\n        xaxis_title=selected_attr,\n        yaxis_title=\"Count\"\n    )\n        return fig\n\n\n    @output\n    @render.plot\n    def seaborn_histogram():\n        df = filtered_data()\n        plt.figure(figsize=(6, 4))\n        sns.histplot(\n            data=df,\n            x=input.selected_attribute(),\n            bins=input.seaborn_bin_count(),\n            hue=\"species\",\n            kde=True\n        )\n        plt.title(\"Seaborn Histogram\")\n        plt.xlabel(input.selected_attribute())\n        plt.ylabel(\"Count\")\n\n    @output\n    @render_widget\n    def plotly_scatterplot():\n        df = filtered_data()\n        selected_attr = input.selected_attribute()\n        fig = px.scatter(\n        df,\n        x=selected_attr,\n        y=\"body_mass_g\",\n        color=\"species\",\n        symbol=\"species\",\n        size=\"bill_length_mm\",\n        size_max=6,\n        hover_data=[\"flipper_length_mm\", \"bill_depth_mm\"],\n        title=f\"{selected_attr} vs Body Mass\"\n    )\n        fig.update_layout(\n        xaxis_title=selected_attr,\n        yaxis_title=\"Body Mass (g)\",\n        legend_title=\"Species\"\n    )\n        return fig\n\n\n# --------------------------------------------------------\n# Run the app\n# --------------------------------------------------------\napp = App(app_ui, server)\n", "type": "text"}]